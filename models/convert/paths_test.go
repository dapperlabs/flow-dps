// Copyright 2021 Optakt Labs OÃœ
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

package convert

import (
	"testing"

	"github.com/stretchr/testify/assert"

	"github.com/onflow/flow-go/ledger"
)

func TestPathsToBytes(t *testing.T) {
	bytes1 := []byte{
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
		0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
		0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
	}

	bytes2 := []byte{
		0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
		0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
		0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
	}

	bytes3 := []byte{
		0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
		0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
		0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
		0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
	}

	path1 := make(ledger.Path, len(bytes1))
	path2 := make(ledger.Path, len(bytes2))
	path3 := make(ledger.Path, len(bytes3))

	copy(path1, bytes1)
	copy(path2, bytes2)
	copy(path3, bytes3)

	paths := []ledger.Path{path1, path2, path3}

	got := PathsToBytes(paths)

	assert.Equal(t, [][]byte{bytes1, bytes2, bytes3}, got)
}

func TestBytesToPaths(t *testing.T) {
	t.Run("nominal case", func(t *testing.T) {
		t.Parallel()

		bytes1 := []byte{
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
			0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
			0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
		}

		bytes2 := []byte{
			0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
			0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
			0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
			0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
		}

		bytes3 := []byte{
			0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
			0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
			0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
			0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
		}

		path1 := make(ledger.Path, len(bytes1))
		path2 := make(ledger.Path, len(bytes2))
		path3 := make(ledger.Path, len(bytes3))

		copy(path1, bytes1)
		copy(path2, bytes2)
		copy(path3, bytes3)

		wantPaths := []ledger.Path{path1, path2, path3}

		bb := [][]byte{bytes1, bytes2, bytes3}

		got, err := BytesToPaths(bb)

		assert.NoError(t, err)
		assert.Equal(t, wantPaths, got)
	})

	t.Run("incorrect-length paths should fail", func(t *testing.T) {
		t.Parallel()

		invalidPath := []byte("1a0457700")

		bb := [][]byte{invalidPath}
		_, err := BytesToPaths(bb)

		assert.Error(t, err)
	})

	t.Run("empty paths should fail", func(t *testing.T) {
		t.Parallel()

		invalidPath := []byte("")

		bb := [][]byte{invalidPath}
		_, err := BytesToPaths(bb)

		assert.Error(t, err)
	})
}
